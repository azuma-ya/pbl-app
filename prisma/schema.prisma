generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

enum ThreadStatus {
  ACTIVE
  INACTIVE
  PREPARING_MANUAL
  CLOSED
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String       @id @default(cuid())
  schoolId      String?
  name          String?
  email         String?      @unique
  emailVerified DateTime?
  image         String?
  isAdmin       Boolean      @default(false)
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt
  accounts      Account[]
  sessions      Session[]
  threads       Thread[]
  manuals       Manual[]
  comments      Comment[]
  roles         RoleUser[]
  subscribes    ThreadUser[]

  school School? @relation(fields: [schoolId], references: [id], onDelete: SetNull)
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@unique([identifier, token])
}

model School {
  id        String   @id @default(cuid())
  name      String
  password  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  users     User[]
  threads   Thread[]
  roles     Role[]
  manuals   Manual[]
}

model Thread {
  id          String       @id @default(cuid())
  userId      String?
  schoolId    String
  title       String
  description String
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  status      ThreadStatus @default(ACTIVE)
  comments    Comment[]
  manuals     Manual[]
  subscribers ThreadUser[]

  user   User?  @relation(fields: [userId], references: [id], onDelete: SetNull)
  school School @relation(fields: [schoolId], references: [id], onDelete: Cascade)
}

model ThreadUser {
  id        String   @id @default(cuid())
  userId    String
  threadId  String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  thread    Thread   @relation(fields: [threadId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([userId, threadId])
}

model Manual {
  id        String   @id @default(cuid())
  userId    String
  schoolId  String?
  threadId  String?
  title     String
  content   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user   User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  thread Thread? @relation(fields: [threadId], references: [id], onDelete: SetNull)
  school School? @relation(fields: [schoolId], references: [id], onDelete: SetNull)
}

model Comment {
  id         String   @id @default(cuid())
  userId     String?
  threadId   String
  content    String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  isSelected Boolean  @default(true)
  parentId   String?

  replies Comment[] @relation("CommentToParent")
  parent  Comment?  @relation("CommentToParent", fields: [parentId], references: [id], onDelete: SetNull)

  user   User?  @relation(fields: [userId], references: [id], onDelete: SetNull)
  thread Thread @relation(fields: [threadId], references: [id], onDelete: Cascade)
}

model Role {
  id        String     @id @default(cuid())
  schoolId  String
  name      String     @unique
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  users     RoleUser[]

  school School? @relation(fields: [schoolId], references: [id], onDelete: Cascade)
}

model RoleUser {
  id        String   @id @default(cuid())
  userId    String
  roleId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  role      Role     @relation(fields: [roleId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([userId, roleId])
}
